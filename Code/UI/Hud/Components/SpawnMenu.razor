@using Sandbox.UI
@using Sandbox.UI.Construct
@* @using Sandbox.UI.Hud.Components.Left *@

@inherits Panel

<root />

@code
{
    public static SpawnMenu Instance { get; protected set; }

    readonly Panel toollist;

    private static ModelList modelList;
    
    public Panel ToolPanel { get; private set; }
    public ButtonGroup SpawnMenuLeftTabs  { get; private set; }
    public Panel SpawnMenuLeftBody { get; private set; }
    public bool IgnoreMenuButton = false;
    private bool IsOpen = false;
    private bool isSearching;
    private bool menuWasPressed = false;

    public SpawnMenu()
    {
        Instance = this;

        var left = Add.Panel("left");
        {
            var tabs = left.AddChild<ButtonGroup>();
            tabs.AddClass("tabs");
            SpawnMenuLeftTabs = tabs;

            var body = left.Add.Panel("body");
            SpawnMenuLeftBody = body;
            {
                modelList = body.AddChild<ModelList>();
                tabs.SelectedButton = tabs.AddButtonActive("#spawnmenu.modellist", (b) => modelList.SetClass("active", b));

                // var ents = body.AddChild<EntityList>();
                // tabs.AddButtonActive("#spawnmenu.entities", (b) => ents.SetClass("active", b));

                // var npclist = body.AddChild<NpcList>();
                // tabs.AddButtonActive("#spawnmenu.npclist", (b) => npclist.SetClass("active", b));

                var props = body.AddChild<SpawnList>();
                tabs.AddButtonActive("#spawnmenu.props", (b) => props.SetClass("active", b));

                // todo: remove this when the "sandbox.hud.loaded" event works again
                DynShapeSpawnMenu.Initialize();
            }
        }

        var right = Add.Panel("right");
        {
            var tabs = right.Add.Panel("tabs");
            {
                tabs.Add.Button("#spawnmenu.tools").AddClass("active");
                tabs.Add.Button("#spawnmenu.utility");
            }

            var body = right.Add.Panel("body");
            {
                toollist = body.Add.Panel("toollist");
                {
                    RebuildToolList();
                }

                ToolPanel = body.Add.Panel("inspector");
            }
        }
    }

    public void RebuildToolList()
    {
        toollist.DeleteChildren(true);

        foreach (var entry in TypeLibrary.GetTypes<BaseTool>().OrderBy(( x ) => x.Title))
        {
            if (entry.Name.StartsWith("Base"))
                continue;

            var button = toollist.Add.Button(entry.Title);
            button.SetClass("active", entry.ClassName == ConsoleSystem.GetValue("tool_current"));

            button.AddEventListener("onclick", () =>
            {
                SetActiveTool(entry.ClassName);

                foreach (var child in toollist.Children)
                    child.SetClass("active", child == button);
            });
        }
    }

    void SetActiveTool(string className)
    {
        // setting a cvar
        ConsoleSystem.Run("tool_current", className);

        // set the active weapon to the toolgun
        var player = Player.FindLocalPlayer();
        if (!player.IsValid())
            return;

        var inventory = player.Inventory;
        if (!inventory.IsValid())
            return;

        // why isn't inventory just an ienumurable wtf
        for (int i = 0; i < inventory.Weapons.Count; i++)
        {
            var weapon = player.Inventory.GetSlot(i);
            if (!weapon.IsValid()) continue;
            if (DisplayInfo.ForType(weapon.GetType()).ClassName != "weapon_tool") continue;

            inventory.SetActiveSlot(i);
        }
    }

    public override void Tick()
    {
        if (!IgnoreMenuButton)
        {
            if (Input.Pressed("menu"))
            {
                IsOpen = true;
            }
            if (menuWasPressed && !Input.Down("menu"))
            {
                IsOpen = false;
            }
        }
        menuWasPressed = Input.Down("menu");

        if (modelList.SearchInput.HasFocus)
        {
            isSearching = true;
        }
        else if (isSearching && Input.Pressed("Menu"))
        {
            isSearching = false;
        }

        if (isSearching)
            return;

        SetClass("spawnmenuopen", IsOpen);
    }
}
